module.exports = class ModuleFedSingleRuntimePlugin {
  constructor(publicPath) {
    this._options = {
      remoteEntry: `${publicPath}/remoteEntry.js`,
      runtime: `${publicPath}/static/js/runtime`
    }
  }

  apply(compiler) {
    if (!this._options) return null
    const options = this._options

    compiler.hooks.compilation.tap('BAFederationCustomPlugin', (compilation) => {
      compilation.hooks.processAssets.tap({
        name: 'MergeRuntimeWithRemoteEntry',
        stage: compilation.PROCESS_ASSETS_STAGE_ADDITIONAL,
        additionalAssets: true
      }, (assets) => {
        Object.entries(assets).forEach(([pathname, source]) => {
          if (pathname.includes(options.runtime)) {
            const remoteEntry = assets[options.remoteEntry]

            if (remoteEntry) {
              assets[options.remoteEntry] = new compiler.webpack.sources.ConcatSource(
                source,
                '/**** runtime and remoteEntry cut-off *****/',
                remoteEntry.source()
              )

              // uncomment this to output additional asset remoteEntry_without_runtime.js
              // const pathSections = pathname.split('.')
              // assets[`${pathSections[0]}_without_runtime.${pathSections[1]}`] = source
            }
          }

          // Uncomment below to see all assets generated by Webpack
          // console.log(`â€” ${pathname}: ${source.size()} bytes`)
        })
      })

      compilation.hooks.processAssets.tap({
        name: 'PostRemoveRuntime',
        stage: compilation.PROCESS_ASSETS_STAGE_ADDITIONS,
        additionalAssets: true
      }, (assets) => {
        Object.entries(assets).forEach(([pathname, source]) => {
          if (pathname.includes(this._options.runtime)) {
            console.log('----- runtime has been merged with remoteEntry -----')
            assets[pathname] = new compiler.webpack.sources.ConcatSource('console.log("----- runtime has been merged with remoteEntry -----")')
          }
        })
      })
    })
  }
}
